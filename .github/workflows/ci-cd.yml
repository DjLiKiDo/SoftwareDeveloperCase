name: CI/CD Pipeline

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]
  release:
    types: [published]
  workflow_dispatch: # Allow manual triggers

env:
  DOTNET_VERSION: "8.0.x"
  SOLUTION_FILE: "SoftwareDeveloperCase.sln"
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for SonarCloud

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          # Note: Using custom NuGet caching below instead of built-in cache

      # Advanced NuGet caching with custom location
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: Verify code formatting
        run: dotnet format --verify-no-changes --verbosity diagnostic

      - name: Build
        run: dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration Release

      # Unit Tests with Coverage
      - name: Run Unit Tests
        run: |
          dotnet test ${{ env.SOLUTION_FILE }} \
            --no-build \
            --verbosity normal \
            --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            --logger trx \
            --logger "console;verbosity=detailed"

      # Generate Coverage Report
      - name: Generate Coverage Report
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator \
            -reports:"coverage/**/coverage.cobertura.xml" \
            -targetdir:"coverage/report" \
            -reporttypes:"Html;Cobertura;JsonSummary"

      # Upload Test Results
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_number }}
          path: |
            **/*.trx
            coverage/report/
          retention-days: 30

      # Upload Coverage to Codecov (opcional)
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: coverage/report/Cobertura.xml
          fail_ci_if_error: false

      # Security Scan
      - name: Check for vulnerable packages
        run: |
          dotnet list package --vulnerable --include-transitive 2>&1 | tee vulnerability-report.txt
          if grep -q "has the following vulnerable packages" vulnerability-report.txt; then
            echo "❌ Vulnerable packages found!"
            exit 1
          else
            echo "✅ No vulnerable packages found"
          fi

      - name: Check for deprecated packages
        run: dotnet list package --deprecated
        continue-on-error: true

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: Build for Release
        run: |
          dotnet build ${{ env.SOLUTION_FILE }} \
            --no-restore \
            --configuration Release \
            /p:Version=${{ github.run_number }} \
            /p:AssemblyVersion=${{ github.run_number }}

      - name: Publish API
        run: |
          dotnet publish src/SoftwareDeveloperCase.Api/SoftwareDeveloperCase.Api.csproj \
            --no-build \
            --configuration Release \
            --output ./publish \
            /p:PublishProfile=FolderProfile

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-build-${{ github.run_number }}
          path: ./publish
          retention-days: 30

  # integration-tests:
  #   name: Integration Tests
  #   runs-on: ubuntu-latest
  #   needs: test

  #   services:
  #     sqlserver:
  #       image: mcr.microsoft.com/mssql/server:2022-latest
  #       env:
  #         SA_PASSWORD: YourStrong@Passw0rd
  #         ACCEPT_EULA: Y
  #       ports:
  #         - 1433:1433
  #       options: >-
  #         --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q 'SELECT 1'"
  #         --health-interval=10s
  #         --health-timeout=5s
  #         --health-retries=3

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: ${{ env.DOTNET_VERSION }}

  #     - name: Cache NuGet packages
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.nuget/packages
  #         key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}
  #         restore-keys: |
  #           ${{ runner.os }}-nuget-

  #     - name: Restore dependencies
  #       run: dotnet restore ${{ env.SOLUTION_FILE }}

  #     - name: Build
  #       run: dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration Release

  #     - name: Wait for SQL Server
  #       run: |
  #         for i in {1..30}; do
  #           if /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -Q 'SELECT 1' &> /dev/null; then
  #             echo "SQL Server is ready"
  #             break
  #           fi
  #           echo "Waiting for SQL Server... ($i/30)"
  #           sleep 2
  #         done

  #     - name: Run Integration Tests
  #       env:
  #         ConnectionStrings__DefaultConnection: "Server=localhost;Database=SoftwareDeveloperCaseTest;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;"
  #       run: |
  #         dotnet test SoftwareDeveloperCase.Test.Integration/ \
  #           --no-build \
  #           --verbosity normal \
  #           --configuration Release \
  #           --logger trx \
  #           --results-directory ./integration-results

  #     - name: Upload Integration Test Results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: integration-test-results-${{ github.run_number }}
  #         path: ./integration-results
  #         retention-days: 30

  # performance-tests:
  #   name: Performance Tests
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Download Build Artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: api-build-${{ github.run_number }}
  #       path: ./publish

  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v4
  #     with:
  #       dotnet-version: ${{ env.DOTNET_VERSION }}

  #   - name: Install NBomber CLI
  #     run: dotnet tool install -g NBomber.Cli

  #   - name: Run Performance Tests
  #     run: |
  #       # Start the API in background
  #       cd ./publish
  #       dotnet SoftwareDeveloperCase.Api.dll &
  #       API_PID=$!

  #       # Wait for API to start
  #       sleep 10

  #       # Run performance tests (example with curl)
  #       echo "Running basic performance test..."
  #       for i in {1..100}; do
  #         curl -s http://localhost:5000/health > /dev/null
  #       done

  #       # Kill the API process
  #       kill $API_PID
  #     continue-on-error: true

  # docker:
  #   name: Build & Push Docker Image
  #   runs-on: ubuntu-latest
  #   needs: [test, build]
  #   # Skip docker job for forks or when not on main/develop branches
  #   if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && github.repository_owner != ''

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   # Use GitHub Container Registry (free for public repos, requires no additional secrets)
  #   - name: Login to GitHub Container Registry
  #     uses: docker/login-action@v3
  #     with:
  #       registry: ghcr.io
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}

  #   - name: Extract metadata
  #     id: meta
  #     uses: docker/metadata-action@v5
  #     with:
  #       images: |
  #         ghcr.io/${{ github.repository }}/softwaredevelopercase
  #       tags: |
  #         type=ref,event=branch
  #         type=ref,event=pr
  #         type=sha,prefix={{branch}}-
  #         type=raw,value=latest,enable={{is_default_branch}}

  #   - name: Build Docker image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       file: ./SoftwareDeveloperCase.Api/Dockerfile
  #       push: true
  #       tags: ${{ steps.meta.outputs.tags }}
  #       labels: ${{ steps.meta.outputs.labels }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max

  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: docker
  #   if: github.ref == 'refs/heads/develop'
  #   # environment: staging  # Uncomment when staging environment is configured in GitHub

  #   steps:
  #   - name: Deploy to staging
  #     run: |
  #       echo "Deploying to staging environment..."
  #       echo "Branch: ${{ github.ref }}"
  #       echo "Commit: ${{ github.sha }}"
  #       # Add your deployment scripts here

  # deploy-production:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: docker
  #   if: github.ref == 'refs/heads/main'
  #   # environment: production  # Uncomment when production environment is configured in GitHub

  #   steps:
  #   - name: Deploy to production
  #     run: |
  #       echo "Deploying to production environment..."
  #       echo "Branch: ${{ github.ref }}"
  #       echo "Commit: ${{ github.sha }}"
  #       # Add your deployment scripts here

  # cleanup:
  #   name: Cleanup
  #   runs-on: ubuntu-latest
  #   needs: [integration-tests, performance-tests]
  #   if: always()

  #   steps:
  #   - name: Clean up caches for PR
  #     if: github.event_name == 'pull_request'
  #     run: |
  #       echo "Cleaning up caches for PR #${{ github.event.pull_request.number }}"
  #       # Cache cleanup logic would go here
