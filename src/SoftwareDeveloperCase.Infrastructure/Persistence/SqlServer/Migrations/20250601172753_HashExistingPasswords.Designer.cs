// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoftwareDeveloperCase.Infrastructure.Persistence.SqlServer;

#nullable disable

namespace SoftwareDeveloperCase.Infrastructure.Persistence.SqlServer.Migrations
{
    [DbContext(typeof(SoftwareDeveloperCaseDbContext))]
    [Migration("20250601172753_HashExistingPasswords")]
    partial class HashExistingPasswords
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Identity.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a6ae1d8-0688-43d4-b1ce-2a13608fa68c"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(5557),
                            Name = "Read"
                        },
                        new
                        {
                            Id = new Guid("d2e69e18-e1a5-48c2-b5b5-eb888c13d46b"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(5560),
                            Name = "Add"
                        },
                        new
                        {
                            Id = new Guid("5162e7da-6b87-424a-a08d-fdd6e3c6b4b2"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(5564),
                            Name = "Update"
                        },
                        new
                        {
                            Id = new Guid("4a03f568-69e4-4548-85b6-8100cad15631"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(5566),
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Identity.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e89d8f2-c8dd-474c-b7fa-267a9570488a"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(5791),
                            PermissionId = new Guid("9a6ae1d8-0688-43d4-b1ce-2a13608fa68c"),
                            RoleId = new Guid("2d7aa3b0-f221-4753-b77f-ff261858a13a")
                        },
                        new
                        {
                            Id = new Guid("00aeb653-9bfd-46bd-98e8-631c080a7cd3"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(5794),
                            PermissionId = new Guid("9a6ae1d8-0688-43d4-b1ce-2a13608fa68c"),
                            RoleId = new Guid("9eca8d57-f7ca-4f8d-9c83-73b659225ae4")
                        },
                        new
                        {
                            Id = new Guid("265e22e5-2252-432e-b6d2-e994740f6f08"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(5797),
                            PermissionId = new Guid("d2e69e18-e1a5-48c2-b5b5-eb888c13d46b"),
                            RoleId = new Guid("9eca8d57-f7ca-4f8d-9c83-73b659225ae4")
                        },
                        new
                        {
                            Id = new Guid("5b953aa8-6bde-4f47-b984-d3622a8e0550"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(5800),
                            PermissionId = new Guid("5162e7da-6b87-424a-a08d-fdd6e3c6b4b2"),
                            RoleId = new Guid("9eca8d57-f7ca-4f8d-9c83-73b659225ae4")
                        },
                        new
                        {
                            Id = new Guid("0754e6c4-4e12-42b1-845b-21ad1fc2f6b0"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(5802),
                            PermissionId = new Guid("4a03f568-69e4-4548-85b6-8100cad15631"),
                            RoleId = new Guid("9eca8d57-f7ca-4f8d-9c83-73b659225ae4")
                        });
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Identity.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47175080-a8c0-4d4f-bf88-85cd5cbff45b"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(6018),
                            RoleId = new Guid("2d7aa3b0-f221-4753-b77f-ff261858a13a"),
                            UserId = new Guid("2d7aa3b0-f221-4753-b77f-ff261858a13a")
                        },
                        new
                        {
                            Id = new Guid("cf61c58c-e416-4b84-a195-dd7b77ef96dd"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(6067),
                            RoleId = new Guid("2d7aa3b0-f221-4753-b77f-ff261858a13a"),
                            UserId = new Guid("64a19c7d-a7a9-4481-a498-7df87f341da4")
                        },
                        new
                        {
                            Id = new Guid("8e49f3ba-11f1-4256-a195-91f9a8f3a41b"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(6070),
                            RoleId = new Guid("9eca8d57-f7ca-4f8d-9c83-73b659225ae4"),
                            UserId = new Guid("64a19c7d-a7a9-4481-a498-7df87f341da4")
                        },
                        new
                        {
                            Id = new Guid("5562714c-a186-439f-a0df-25321703cf7e"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(6073),
                            RoleId = new Guid("2d7aa3b0-f221-4753-b77f-ff261858a13a"),
                            UserId = new Guid("29d6cf7d-2335-4329-91ad-4a7ec437d73c")
                        },
                        new
                        {
                            Id = new Guid("4dc7a2ea-5e37-4038-8810-79fd9df7ac0a"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(6076),
                            RoleId = new Guid("2d7aa3b0-f221-4753-b77f-ff261858a13a"),
                            UserId = new Guid("94651e82-5fc3-43d0-9c64-5a16ac517d43")
                        },
                        new
                        {
                            Id = new Guid("07a59e4e-ead7-4597-bb36-96a06ee3a847"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(6078),
                            RoleId = new Guid("9eca8d57-f7ca-4f8d-9c83-73b659225ae4"),
                            UserId = new Guid("94651e82-5fc3-43d0-9c64-5a16ac517d43")
                        });
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Project.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentRoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d7aa3b0-f221-4753-b77f-ff261858a13a"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(5722),
                            Name = "Employee"
                        },
                        new
                        {
                            Id = new Guid("9eca8d57-f7ca-4f8d-9c83-73b659225ae4"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(5728),
                            Name = "Manager",
                            ParentRoleId = new Guid("2d7aa3b0-f221-4753-b77f-ff261858a13a")
                        });
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Task.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ActualHours")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("AssignedToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EstimatedHours")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ParentTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Task.TaskComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskComment");
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Team.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Team.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeftDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeamRole")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMember");
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d7aa3b0-f221-4753-b77f-ff261858a13a"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(5955),
                            Email = "hremployee@sdc.com",
                            IsActive = true,
                            Name = "HR Employee",
                            Password = "sdc"
                        },
                        new
                        {
                            Id = new Guid("64a19c7d-a7a9-4481-a498-7df87f341da4"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(5963),
                            Email = "hrmanager@sdc.com",
                            IsActive = true,
                            Name = "HR Manager",
                            Password = "sdc"
                        },
                        new
                        {
                            Id = new Guid("29d6cf7d-2335-4329-91ad-4a7ec437d73c"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(5970),
                            Email = "itemployee@sdc.com",
                            IsActive = true,
                            Name = "IT Employee",
                            Password = "sdc"
                        },
                        new
                        {
                            Id = new Guid("94651e82-5fc3-43d0-9c64-5a16ac517d43"),
                            CreatedBy = "InitialSeed",
                            CreatedOn = new DateTime(2025, 6, 1, 17, 27, 53, 95, DateTimeKind.Utc).AddTicks(5976),
                            Email = "itmanager@sdc.com",
                            IsActive = true,
                            Name = "IT Manager",
                            Password = "sdc"
                        });
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Identity.RolePermission", b =>
                {
                    b.HasOne("SoftwareDeveloperCase.Domain.Entities.Identity.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwareDeveloperCase.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("SoftwareDeveloperCase.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwareDeveloperCase.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Project.Project", b =>
                {
                    b.HasOne("SoftwareDeveloperCase.Domain.Entities.Team.Team", "Team")
                        .WithMany("Projects")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Role", b =>
                {
                    b.HasOne("SoftwareDeveloperCase.Domain.Entities.Role", "ParentRole")
                        .WithMany()
                        .HasForeignKey("ParentRoleId");

                    b.Navigation("ParentRole");
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Task.Task", b =>
                {
                    b.HasOne("SoftwareDeveloperCase.Domain.Entities.User", "AssignedTo")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedToId");

                    b.HasOne("SoftwareDeveloperCase.Domain.Entities.Task.Task", "ParentTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("ParentTaskId");

                    b.HasOne("SoftwareDeveloperCase.Domain.Entities.Project.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SoftwareDeveloperCase.Domain.ValueObjects.TaskHierarchy", "Hierarchy", b1 =>
                        {
                            b1.Property<Guid>("TaskId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Level")
                                .HasColumnType("int")
                                .HasColumnName("HierarchyLevel");

                            b1.Property<int>("Order")
                                .HasColumnType("int")
                                .HasColumnName("HierarchyOrder");

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("HierarchyPath");

                            b1.HasKey("TaskId");

                            b1.ToTable("TaskHierarchy");

                            b1.WithOwner()
                                .HasForeignKey("TaskId");
                        });

                    b.Navigation("AssignedTo");

                    b.Navigation("Hierarchy")
                        .IsRequired();

                    b.Navigation("ParentTask");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Task.TaskComment", b =>
                {
                    b.HasOne("SoftwareDeveloperCase.Domain.Entities.User", "Author")
                        .WithMany("TaskComments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwareDeveloperCase.Domain.Entities.Task.Task", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Team.TeamMember", b =>
                {
                    b.HasOne("SoftwareDeveloperCase.Domain.Entities.Team.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwareDeveloperCase.Domain.Entities.User", "User")
                        .WithMany("TeamMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Identity.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Project.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Task.Task", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.Team.Team", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("SoftwareDeveloperCase.Domain.Entities.User", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("TaskComments");

                    b.Navigation("TeamMemberships");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
